{"version":3,"sources":["utils/API.js","components/Container/index.js","components/WordRow/index.js","pages/Homepage.js","pages/Outcome.js","pages/NoMatch.js","components/Wrapper/index.js","App.js","index.js"],"names":["counter","console","log","counterNum","axios","get","Container","fluid","children","className","WordRow","props","sentArray","Object","values","useState","guessed","setInputValue","array","word","letters","map","index","length","spacedWord","push","shift","i","wordToSplit","letterAr","split","indexedLetters","letterIndex","createLetterArray","window","addEventListener","event","key","letter","id","Homepage","scrambledSentence","setScrambledSentence","setSentence","score","setScore","sentenceArray","setSentenceArray","useEffect","loadGame","scrambleSentence","sentence","sentenceArr","newSentence","letterArr","firstLetter","lastLetter","pop","j","Math","floor","random","temp","join","scrambledInside","scrambleWord","API","then","res","unscrambledSentence","data","catch","err","Outcome","href","target","rel","NoMatch","role","aria-label","Wrapper","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.033ed0a1.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    getSentence: function(counter) {\r\n        console.log(counter);\r\n        const counterNum = counter;\r\n      return axios.get(`https://api.hatchways.io/assessment/sentences/${counterNum}`);\r\n    }\r\n    \r\n  };\r\n\r\n\r\n// method: GET\r\n// url: https://api.hatchways.io/assessment/sentences/:counter\r\n// Replace :counter with 1 (https://api.hatchways.io/assessment/sentences/1) to get the first\r\n// sentence to begin with.\r\n","import React from \"react\";\r\n\r\n// Exporting the Container\r\n\r\n// This Container component allows us to use a bootstrap container without worrying about class names\r\nfunction Container({ fluid, children }) {\r\n  return <div className={`container${fluid ? \"-fluid\" : \"\"} page-container`}>{children}</div>\r\n  \r\n};\r\n\r\nexport default Container;\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction WordRow(props) {\r\n\t//retrieves the array of sentence words\r\n\tconst sentArray = Object.values(props);\r\n\r\n\t//react hooks to hold state\r\n\tconst [guessed, setGuessed] = useState(false);\r\n\tconst [inputValue, setInputValue] = useState(\"\");\r\n\r\n\t//initial array of objects\r\n\tconst array = [\r\n\t\t{\r\n\t\t\tword: \"\",\r\n\t\t\tletters: [],\r\n\t\t},\r\n\t];\r\n\r\n\t//counter used to increment for unique letter keys\r\n\tvar counter = 0;\r\n\r\n\t//adds the letters of each word to the array and assigns them a unique key\r\n\tconst createLetterArray = () => {\r\n\t\tfor (let i = 0; i < array.length; i++) {\r\n\t\t\tconst wordToSplit = array[i].word;\r\n\t\t\tconsole.log(wordToSplit);\r\n\t\t\tconst letterAr = wordToSplit.split(\"\");\r\n\r\n\t\t\tlet indexedLetters = [];\r\n\r\n\t\t\tfor (let letterIndex = 0; letterIndex < letterAr.length; letterIndex++) {\r\n\t\t\t\tindexedLetters.push([counter, letterAr[letterIndex]]);\r\n\t\t\t\tcounter++;\r\n\t\t\t}\r\n\t\t\tconsole.log(letterAr);\r\n\t\t\tarray[i].letters = indexedLetters;\r\n\t\t}\r\n\t};\r\n\r\n\t//pushes words into array\r\n\tconst createWordArray = () => {\r\n\t\tsentArray.map((word, index) => {\r\n\t\t\tif (index < sentArray.length - 1) {\r\n\t\t\t\tvar spacedWord = word + \" \";\r\n\t\t\t\tarray.push({ word: spacedWord });\r\n\t\t\t} else {\r\n\t\t\t\tarray.push({ word: word });\r\n\t\t\t}\r\n\t\t});\r\n\t\tarray.shift();\r\n\t\tcreateLetterArray();\r\n\t};\r\n\r\n\t//init - calls function to create word arrays\r\n\tcreateWordArray();\r\n\tarray.map((letters) => {\r\n\t\tconsole.log(letters)\r\n\t});\r\n\r\n\t//beginning of keyDown event to evaluate user keyboard input\r\n\twindow.addEventListener(\"keydown\", (event) => {\r\n\t\tsetInputValue(event.key);\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{/* {array.map((letters) => {\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t{letters.map((letter) => {\r\n\t\t\t\t\t\t<div className=\"col\" id=\"letterSpace\" key={letter.id}>\r\n\t\t\t\t\t\t\t<span className={guessed ? \"guessed\" : \"notGuessed\"}>\r\n\t\t\t\t\t\t\t\t{letter}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t})} */}\r\n\t\t\t{sentArray.map((word, index) => (\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t {word.split(\"\").map((letter, index) => ( \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div className=\"col\" id=\"letterSpace\" key={`letter` + index}>\r\n\t\t\t\t\t\t\t<span className={guessed ? \"guessed\" : \"notGuessed\"}>\r\n\t\t\t\t\t\t\t\t{letter}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\r\n\t\t\t\t\t{index < sentArray.length - 1 ? (\r\n\t\t\t\t\t\t<div className=\"col\" id=\"space\"></div>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default WordRow;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport \"../../src/App.css\";\r\nimport Container from \"../components/Container\";\r\nimport WordRow from \"../components/WordRow/\";\r\n\r\nconst Homepage = () => {\r\n\t\r\n\t//React hooks to render state\r\n\tconst [scrambledSentence, setScrambledSentence] = useState(\"\");\r\n\tconst [sentence, setSentence] = useState(\"\");\r\n\tconst [score, setScore] = useState(0);\r\n\tconst [sentenceArray, setSentenceArray] = useState([]);\r\n\t\r\n\t//API sentence counter - will increment when each sentence puzzle is solved\r\n\tconst counter = 1;\r\n\r\n\t//initialization function\r\n\tuseEffect(() => {\r\n\t\tloadGame();\r\n\t}, []);\r\n\r\n\tconst scrambleWord = (word) => {\r\n\t\tvar length = word.length;\r\n\t\tvar letterArr = word.split(\"\");\r\n\t\tvar firstLetter = letterArr[0];\r\n\t\tvar lastLetter = letterArr[length - 1];\r\n\t\tletterArr.pop();\r\n\t\tletterArr.shift();\r\n\t\tconst scrambledInside = (letterArr) => {\r\n\t\t\tfor (var i = 0; i < length - 2; i++) {\r\n\t\t\t\tvar j = Math.floor(Math.random() * length);\r\n\t\t\t\tvar temp = letterArr[i];\r\n\t\t\t\tletterArr[i] = letterArr[j];\r\n\t\t\t\tletterArr[j] = temp;\r\n\t\t\t}\r\n\t\t\treturn letterArr.join(\"\");\r\n\t\t};\r\n\t\treturn `${firstLetter}` + `${scrambledInside(letterArr)}` + `${lastLetter}`;\r\n\t};\r\n\r\n\tconst scrambleSentence = (sentence) => {\r\n\t\tconst sentenceArr = sentence.split(\" \");\r\n\t\tsetSentenceArray(sentenceArr);\r\n\t\tconst newSentence = [];\r\n\t\tsentenceArr.map((word) => {\r\n\t\t\tif (word.length > 2) {\r\n\t\t\t\tnewSentence.push(scrambleWord(word));\r\n\t\t\t} else {\r\n\t\t\t\tnewSentence.push(word);\r\n\t\t\t}\r\n\t\t});\r\n\t\tsetScrambledSentence(newSentence.join(\" \"));\r\n\t};\r\n\r\n\t//loads game; sets score; retrieves sentences from API\r\n\tconst loadGame = () => {\r\n\t\tsetScore(0);\r\n\t\tAPI.getSentence(counter)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconst unscrambledSentence = res.data.data.sentence;\r\n\t\t\t\tsetSentence(unscrambledSentence);\r\n\t\t\t\tscrambleSentence(unscrambledSentence);\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.log(err));\r\n\t};\r\n\r\n\t//beginning of score calculation function\r\n\t// const calcScore = () => {};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Container fluid>\r\n\t\t\t\t<div className=\"row justify-content-center\" id=\"contentRow\">\r\n\t\t\t\t\t<div className=\"col-12 col-md-8\" id=\"contentBox\">\r\n\t\t\t\t\t\t<div className=\"row text-center\" id=\"sentence-text\">\r\n\t\t\t\t\t\t\t<h1>{scrambledSentence}</h1>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"row text-center\" id=\"directions-text\">\r\n\t\t\t\t\t\t\t<p>Guess the sentence! Start typing</p>\r\n\t\t\t\t\t\t\t<p>The yellow blocks are meant for spaces</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<h2 className=\"row text-center\" id=\"score\">\r\n\t\t\t\t\t\t\t<p>Score: {score}</p>\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t<div className=\"row text-center\" id=\"directions-text\">\r\n\t\t\t\t\t\t\t<WordRow {...sentenceArray} />\r\n\t\t\t\t\t\t\t<div className=\"col-12\"></div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Homepage;\r\n","import React from \"react\";\r\n\r\nfunction Outcome() {\r\nreturn (\r\n<div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n        <p>\r\n          You win!\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n);\r\n\r\n};\r\n\r\nexport default Outcome;\r\n\r\n","import React from \"react\";\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"jumbotron\">\r\n            <h1>404 Page Not Found</h1>\r\n            <h1>\r\n              <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n                🙄\r\n              </span>\r\n            </h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <main className=\"wrapper\" {...props} />;\r\n}\r\n\r\nexport default Wrapper;","import \"./App.css\";\nimport React from \"react\";\nimport Homepage from \"./pages/Homepage\";\nimport Outcome from \"./pages/Outcome\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Wrapper from \"./components/Wrapper\";\n\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<div>\n\t\t\t\t<Wrapper>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\" component={Homepage} />\n\t\t\t\t\t\t<Route exact path=\"/outcome\" component={Outcome} />\n\t\t\t\t\t\t<Route component={NoMatch} />\n\t\t\t\t\t</Switch>\n\t\t\t\t\t</Wrapper>\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}